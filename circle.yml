machine:
  java:
    version: openjdk8
  node:
    version: 5.7.0
  environment:
    PROJECT_NAME: akvo-lumen
    PROD_CLUSTER_NAME: lumen
    DEV_CLUSTER_NAME: test
    CLOUDSDK_COMPUTE_ZONE: europe-west1-d
    DEBIAN_FRONTEND: noninteractive
    LEIN_FAST_TRAMPOLINE: true
  hosts:
    postgres: 127.0.0.1
    auth.lumen.localhost: 127.0.0.1
  services:
    - docker

dependencies:
  cache_directories:
    - "~/.package_cache"
    - "~/docker-images"

  pre:
    - sudo apt-get update; sudo apt-get install postgis gdal-bin
    # Stopping the default postgres so we can start our own.
    # See https://discuss.circleci.com/t/how-to-permanently-shutdown-circleci-default-postgres-mongodb-etc/7329
    - |
        echo manual | sudo tee /etc/init/postgresql.override
        while sudo lsof -Pi :5432 -sTCP:LISTEN -t; do
          echo "Waiting for postgresql to stop for real."
          sudo service postgresql stop;
          sleep 1;
        done
    # Keycloak
    - chmod u+x keycloak/build-container-ci.sh
    - ./build-container-ci.sh:
        pwd: keycloak
    - docker run -d -p 8080:8080 --name lumen-keycloak -t akvo/keycloak:$CIRCLE_SHA1
    # Postgres
    - chmod u+x postgres/build-container-ci.sh
    - ./build-container-ci.sh:
        pwd: postgres
    - docker run -d --name lumen-db -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=db -t akvo/lumen-db:$CIRCLE_SHA1
    # Backend
    - cp profiles.clj.template profiles.clj:
        pwd: backend
    # Installing self-signed certificate to be able to talk with Postgres
    - sudo $JAVA_HOME/jre/bin/keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias postgrescert -file postgres/provision/server.crt
    # Client
    - npm config set spin false:
        pwd: client
    - npm install -g npm-cache
    - npm-cache install:
        pwd: client

test:
  override:
    - lein do clean, check, test :all:
        pwd: backend
    - npm run lint:
        pwd: client
    - npm test:
        pwd: client

deployment:
  dev:
    branch: develop
    commands:
      - ./ci/dev/setup_gcloud.sh
      - ./ci/dev/build_containers.sh
      - ./ci/dev/deploy.sh

  prod:
    branch: master
    commands:
      - ./ci/prod/setup_gcloud.sh
      - ./ci/prod/build_containers.sh
      - ./ci/prod/deploy.sh
